/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LibraryAContentService } from "../libraryAContent.service";
import { LibraryAContentCreateInput } from "./LibraryAContentCreateInput";
import { LibraryAContent } from "./LibraryAContent";
import { LibraryAContentFindManyArgs } from "./LibraryAContentFindManyArgs";
import { LibraryAContentWhereUniqueInput } from "./LibraryAContentWhereUniqueInput";
import { LibraryAContentUpdateInput } from "./LibraryAContentUpdateInput";

export class LibraryAContentControllerBase {
  constructor(protected readonly service: LibraryAContentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LibraryAContent })
  async createLibraryAContent(
    @common.Body() data: LibraryAContentCreateInput
  ): Promise<LibraryAContent> {
    return await this.service.createLibraryAContent({
      data: data,
      select: {
        createdAt: true,
        genre: true,
        id: true,
        language: true,
        movie: true,
        series: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LibraryAContent] })
  @ApiNestedQuery(LibraryAContentFindManyArgs)
  async libraryAContents(
    @common.Req() request: Request
  ): Promise<LibraryAContent[]> {
    const args = plainToClass(LibraryAContentFindManyArgs, request.query);
    return this.service.libraryAContents({
      ...args,
      select: {
        createdAt: true,
        genre: true,
        id: true,
        language: true,
        movie: true,
        series: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LibraryAContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async libraryAContent(
    @common.Param() params: LibraryAContentWhereUniqueInput
  ): Promise<LibraryAContent | null> {
    const result = await this.service.libraryAContent({
      where: params,
      select: {
        createdAt: true,
        genre: true,
        id: true,
        language: true,
        movie: true,
        series: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LibraryAContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLibraryAContent(
    @common.Param() params: LibraryAContentWhereUniqueInput,
    @common.Body() data: LibraryAContentUpdateInput
  ): Promise<LibraryAContent | null> {
    try {
      return await this.service.updateLibraryAContent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          genre: true,
          id: true,
          language: true,
          movie: true,
          series: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LibraryAContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLibraryAContent(
    @common.Param() params: LibraryAContentWhereUniqueInput
  ): Promise<LibraryAContent | null> {
    try {
      return await this.service.deleteLibraryAContent({
        where: params,
        select: {
          createdAt: true,
          genre: true,
          id: true,
          language: true,
          movie: true,
          series: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
