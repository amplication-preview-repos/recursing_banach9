/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LibraryAContent as PrismaLibraryAContent,
} from "@prisma/client";

export class LibraryAContentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LibraryAContentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.libraryAContent.count(args);
  }

  async libraryAContents(
    args: Prisma.LibraryAContentFindManyArgs
  ): Promise<PrismaLibraryAContent[]> {
    return this.prisma.libraryAContent.findMany(args);
  }
  async libraryAContent(
    args: Prisma.LibraryAContentFindUniqueArgs
  ): Promise<PrismaLibraryAContent | null> {
    return this.prisma.libraryAContent.findUnique(args);
  }
  async createLibraryAContent(
    args: Prisma.LibraryAContentCreateArgs
  ): Promise<PrismaLibraryAContent> {
    return this.prisma.libraryAContent.create(args);
  }
  async updateLibraryAContent(
    args: Prisma.LibraryAContentUpdateArgs
  ): Promise<PrismaLibraryAContent> {
    return this.prisma.libraryAContent.update(args);
  }
  async deleteLibraryAContent(
    args: Prisma.LibraryAContentDeleteArgs
  ): Promise<PrismaLibraryAContent> {
    return this.prisma.libraryAContent.delete(args);
  }
}
