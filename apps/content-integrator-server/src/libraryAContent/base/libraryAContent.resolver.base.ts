/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LibraryAContent } from "./LibraryAContent";
import { LibraryAContentCountArgs } from "./LibraryAContentCountArgs";
import { LibraryAContentFindManyArgs } from "./LibraryAContentFindManyArgs";
import { LibraryAContentFindUniqueArgs } from "./LibraryAContentFindUniqueArgs";
import { CreateLibraryAContentArgs } from "./CreateLibraryAContentArgs";
import { UpdateLibraryAContentArgs } from "./UpdateLibraryAContentArgs";
import { DeleteLibraryAContentArgs } from "./DeleteLibraryAContentArgs";
import { LibraryAContentService } from "../libraryAContent.service";
@graphql.Resolver(() => LibraryAContent)
export class LibraryAContentResolverBase {
  constructor(protected readonly service: LibraryAContentService) {}

  async _libraryAContentsMeta(
    @graphql.Args() args: LibraryAContentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LibraryAContent])
  async libraryAContents(
    @graphql.Args() args: LibraryAContentFindManyArgs
  ): Promise<LibraryAContent[]> {
    return this.service.libraryAContents(args);
  }

  @graphql.Query(() => LibraryAContent, { nullable: true })
  async libraryAContent(
    @graphql.Args() args: LibraryAContentFindUniqueArgs
  ): Promise<LibraryAContent | null> {
    const result = await this.service.libraryAContent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LibraryAContent)
  async createLibraryAContent(
    @graphql.Args() args: CreateLibraryAContentArgs
  ): Promise<LibraryAContent> {
    return await this.service.createLibraryAContent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LibraryAContent)
  async updateLibraryAContent(
    @graphql.Args() args: UpdateLibraryAContentArgs
  ): Promise<LibraryAContent | null> {
    try {
      return await this.service.updateLibraryAContent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LibraryAContent)
  async deleteLibraryAContent(
    @graphql.Args() args: DeleteLibraryAContentArgs
  ): Promise<LibraryAContent | null> {
    try {
      return await this.service.deleteLibraryAContent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
