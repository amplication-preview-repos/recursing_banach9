/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LibraryDContent as PrismaLibraryDContent,
} from "@prisma/client";

export class LibraryDContentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LibraryDContentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.libraryDContent.count(args);
  }

  async libraryDContents(
    args: Prisma.LibraryDContentFindManyArgs
  ): Promise<PrismaLibraryDContent[]> {
    return this.prisma.libraryDContent.findMany(args);
  }
  async libraryDContent(
    args: Prisma.LibraryDContentFindUniqueArgs
  ): Promise<PrismaLibraryDContent | null> {
    return this.prisma.libraryDContent.findUnique(args);
  }
  async createLibraryDContent(
    args: Prisma.LibraryDContentCreateArgs
  ): Promise<PrismaLibraryDContent> {
    return this.prisma.libraryDContent.create(args);
  }
  async updateLibraryDContent(
    args: Prisma.LibraryDContentUpdateArgs
  ): Promise<PrismaLibraryDContent> {
    return this.prisma.libraryDContent.update(args);
  }
  async deleteLibraryDContent(
    args: Prisma.LibraryDContentDeleteArgs
  ): Promise<PrismaLibraryDContent> {
    return this.prisma.libraryDContent.delete(args);
  }
}
