/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LibraryDContent } from "./LibraryDContent";
import { LibraryDContentCountArgs } from "./LibraryDContentCountArgs";
import { LibraryDContentFindManyArgs } from "./LibraryDContentFindManyArgs";
import { LibraryDContentFindUniqueArgs } from "./LibraryDContentFindUniqueArgs";
import { CreateLibraryDContentArgs } from "./CreateLibraryDContentArgs";
import { UpdateLibraryDContentArgs } from "./UpdateLibraryDContentArgs";
import { DeleteLibraryDContentArgs } from "./DeleteLibraryDContentArgs";
import { LibraryDContentService } from "../libraryDContent.service";
@graphql.Resolver(() => LibraryDContent)
export class LibraryDContentResolverBase {
  constructor(protected readonly service: LibraryDContentService) {}

  async _libraryDContentsMeta(
    @graphql.Args() args: LibraryDContentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LibraryDContent])
  async libraryDContents(
    @graphql.Args() args: LibraryDContentFindManyArgs
  ): Promise<LibraryDContent[]> {
    return this.service.libraryDContents(args);
  }

  @graphql.Query(() => LibraryDContent, { nullable: true })
  async libraryDContent(
    @graphql.Args() args: LibraryDContentFindUniqueArgs
  ): Promise<LibraryDContent | null> {
    const result = await this.service.libraryDContent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LibraryDContent)
  async createLibraryDContent(
    @graphql.Args() args: CreateLibraryDContentArgs
  ): Promise<LibraryDContent> {
    return await this.service.createLibraryDContent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LibraryDContent)
  async updateLibraryDContent(
    @graphql.Args() args: UpdateLibraryDContentArgs
  ): Promise<LibraryDContent | null> {
    try {
      return await this.service.updateLibraryDContent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LibraryDContent)
  async deleteLibraryDContent(
    @graphql.Args() args: DeleteLibraryDContentArgs
  ): Promise<LibraryDContent | null> {
    try {
      return await this.service.deleteLibraryDContent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
