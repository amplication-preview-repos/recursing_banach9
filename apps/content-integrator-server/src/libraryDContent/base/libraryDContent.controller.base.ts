/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LibraryDContentService } from "../libraryDContent.service";
import { LibraryDContentCreateInput } from "./LibraryDContentCreateInput";
import { LibraryDContent } from "./LibraryDContent";
import { LibraryDContentFindManyArgs } from "./LibraryDContentFindManyArgs";
import { LibraryDContentWhereUniqueInput } from "./LibraryDContentWhereUniqueInput";
import { LibraryDContentUpdateInput } from "./LibraryDContentUpdateInput";

export class LibraryDContentControllerBase {
  constructor(protected readonly service: LibraryDContentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LibraryDContent })
  async createLibraryDContent(
    @common.Body() data: LibraryDContentCreateInput
  ): Promise<LibraryDContent> {
    return await this.service.createLibraryDContent({
      data: data,
      select: {
        createdAt: true,
        genre: true,
        id: true,
        language: true,
        movie: true,
        series: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LibraryDContent] })
  @ApiNestedQuery(LibraryDContentFindManyArgs)
  async libraryDContents(
    @common.Req() request: Request
  ): Promise<LibraryDContent[]> {
    const args = plainToClass(LibraryDContentFindManyArgs, request.query);
    return this.service.libraryDContents({
      ...args,
      select: {
        createdAt: true,
        genre: true,
        id: true,
        language: true,
        movie: true,
        series: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LibraryDContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async libraryDContent(
    @common.Param() params: LibraryDContentWhereUniqueInput
  ): Promise<LibraryDContent | null> {
    const result = await this.service.libraryDContent({
      where: params,
      select: {
        createdAt: true,
        genre: true,
        id: true,
        language: true,
        movie: true,
        series: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LibraryDContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLibraryDContent(
    @common.Param() params: LibraryDContentWhereUniqueInput,
    @common.Body() data: LibraryDContentUpdateInput
  ): Promise<LibraryDContent | null> {
    try {
      return await this.service.updateLibraryDContent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          genre: true,
          id: true,
          language: true,
          movie: true,
          series: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LibraryDContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLibraryDContent(
    @common.Param() params: LibraryDContentWhereUniqueInput
  ): Promise<LibraryDContent | null> {
    try {
      return await this.service.deleteLibraryDContent({
        where: params,
        select: {
          createdAt: true,
          genre: true,
          id: true,
          language: true,
          movie: true,
          series: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
