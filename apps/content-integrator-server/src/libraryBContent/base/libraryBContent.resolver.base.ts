/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LibraryBContent } from "./LibraryBContent";
import { LibraryBContentCountArgs } from "./LibraryBContentCountArgs";
import { LibraryBContentFindManyArgs } from "./LibraryBContentFindManyArgs";
import { LibraryBContentFindUniqueArgs } from "./LibraryBContentFindUniqueArgs";
import { CreateLibraryBContentArgs } from "./CreateLibraryBContentArgs";
import { UpdateLibraryBContentArgs } from "./UpdateLibraryBContentArgs";
import { DeleteLibraryBContentArgs } from "./DeleteLibraryBContentArgs";
import { LibraryBContentService } from "../libraryBContent.service";
@graphql.Resolver(() => LibraryBContent)
export class LibraryBContentResolverBase {
  constructor(protected readonly service: LibraryBContentService) {}

  async _libraryBContentsMeta(
    @graphql.Args() args: LibraryBContentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LibraryBContent])
  async libraryBContents(
    @graphql.Args() args: LibraryBContentFindManyArgs
  ): Promise<LibraryBContent[]> {
    return this.service.libraryBContents(args);
  }

  @graphql.Query(() => LibraryBContent, { nullable: true })
  async libraryBContent(
    @graphql.Args() args: LibraryBContentFindUniqueArgs
  ): Promise<LibraryBContent | null> {
    const result = await this.service.libraryBContent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LibraryBContent)
  async createLibraryBContent(
    @graphql.Args() args: CreateLibraryBContentArgs
  ): Promise<LibraryBContent> {
    return await this.service.createLibraryBContent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LibraryBContent)
  async updateLibraryBContent(
    @graphql.Args() args: UpdateLibraryBContentArgs
  ): Promise<LibraryBContent | null> {
    try {
      return await this.service.updateLibraryBContent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LibraryBContent)
  async deleteLibraryBContent(
    @graphql.Args() args: DeleteLibraryBContentArgs
  ): Promise<LibraryBContent | null> {
    try {
      return await this.service.deleteLibraryBContent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
