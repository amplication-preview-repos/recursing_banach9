/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LibraryBContentService } from "../libraryBContent.service";
import { LibraryBContentCreateInput } from "./LibraryBContentCreateInput";
import { LibraryBContent } from "./LibraryBContent";
import { LibraryBContentFindManyArgs } from "./LibraryBContentFindManyArgs";
import { LibraryBContentWhereUniqueInput } from "./LibraryBContentWhereUniqueInput";
import { LibraryBContentUpdateInput } from "./LibraryBContentUpdateInput";

export class LibraryBContentControllerBase {
  constructor(protected readonly service: LibraryBContentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LibraryBContent })
  async createLibraryBContent(
    @common.Body() data: LibraryBContentCreateInput
  ): Promise<LibraryBContent> {
    return await this.service.createLibraryBContent({
      data: data,
      select: {
        createdAt: true,
        genre: true,
        id: true,
        language: true,
        movie: true,
        series: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LibraryBContent] })
  @ApiNestedQuery(LibraryBContentFindManyArgs)
  async libraryBContents(
    @common.Req() request: Request
  ): Promise<LibraryBContent[]> {
    const args = plainToClass(LibraryBContentFindManyArgs, request.query);
    return this.service.libraryBContents({
      ...args,
      select: {
        createdAt: true,
        genre: true,
        id: true,
        language: true,
        movie: true,
        series: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LibraryBContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async libraryBContent(
    @common.Param() params: LibraryBContentWhereUniqueInput
  ): Promise<LibraryBContent | null> {
    const result = await this.service.libraryBContent({
      where: params,
      select: {
        createdAt: true,
        genre: true,
        id: true,
        language: true,
        movie: true,
        series: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LibraryBContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLibraryBContent(
    @common.Param() params: LibraryBContentWhereUniqueInput,
    @common.Body() data: LibraryBContentUpdateInput
  ): Promise<LibraryBContent | null> {
    try {
      return await this.service.updateLibraryBContent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          genre: true,
          id: true,
          language: true,
          movie: true,
          series: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LibraryBContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLibraryBContent(
    @common.Param() params: LibraryBContentWhereUniqueInput
  ): Promise<LibraryBContent | null> {
    try {
      return await this.service.deleteLibraryBContent({
        where: params,
        select: {
          createdAt: true,
          genre: true,
          id: true,
          language: true,
          movie: true,
          series: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
