/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LibraryBContent as PrismaLibraryBContent,
} from "@prisma/client";

export class LibraryBContentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LibraryBContentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.libraryBContent.count(args);
  }

  async libraryBContents(
    args: Prisma.LibraryBContentFindManyArgs
  ): Promise<PrismaLibraryBContent[]> {
    return this.prisma.libraryBContent.findMany(args);
  }
  async libraryBContent(
    args: Prisma.LibraryBContentFindUniqueArgs
  ): Promise<PrismaLibraryBContent | null> {
    return this.prisma.libraryBContent.findUnique(args);
  }
  async createLibraryBContent(
    args: Prisma.LibraryBContentCreateArgs
  ): Promise<PrismaLibraryBContent> {
    return this.prisma.libraryBContent.create(args);
  }
  async updateLibraryBContent(
    args: Prisma.LibraryBContentUpdateArgs
  ): Promise<PrismaLibraryBContent> {
    return this.prisma.libraryBContent.update(args);
  }
  async deleteLibraryBContent(
    args: Prisma.LibraryBContentDeleteArgs
  ): Promise<PrismaLibraryBContent> {
    return this.prisma.libraryBContent.delete(args);
  }
}
