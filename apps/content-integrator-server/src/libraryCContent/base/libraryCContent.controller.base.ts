/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LibraryCContentService } from "../libraryCContent.service";
import { LibraryCContentCreateInput } from "./LibraryCContentCreateInput";
import { LibraryCContent } from "./LibraryCContent";
import { LibraryCContentFindManyArgs } from "./LibraryCContentFindManyArgs";
import { LibraryCContentWhereUniqueInput } from "./LibraryCContentWhereUniqueInput";
import { LibraryCContentUpdateInput } from "./LibraryCContentUpdateInput";

export class LibraryCContentControllerBase {
  constructor(protected readonly service: LibraryCContentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LibraryCContent })
  async createLibraryCContent(
    @common.Body() data: LibraryCContentCreateInput
  ): Promise<LibraryCContent> {
    return await this.service.createLibraryCContent({
      data: data,
      select: {
        createdAt: true,
        genre: true,
        id: true,
        language: true,
        movie: true,
        series: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LibraryCContent] })
  @ApiNestedQuery(LibraryCContentFindManyArgs)
  async libraryCContents(
    @common.Req() request: Request
  ): Promise<LibraryCContent[]> {
    const args = plainToClass(LibraryCContentFindManyArgs, request.query);
    return this.service.libraryCContents({
      ...args,
      select: {
        createdAt: true,
        genre: true,
        id: true,
        language: true,
        movie: true,
        series: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LibraryCContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async libraryCContent(
    @common.Param() params: LibraryCContentWhereUniqueInput
  ): Promise<LibraryCContent | null> {
    const result = await this.service.libraryCContent({
      where: params,
      select: {
        createdAt: true,
        genre: true,
        id: true,
        language: true,
        movie: true,
        series: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LibraryCContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLibraryCContent(
    @common.Param() params: LibraryCContentWhereUniqueInput,
    @common.Body() data: LibraryCContentUpdateInput
  ): Promise<LibraryCContent | null> {
    try {
      return await this.service.updateLibraryCContent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          genre: true,
          id: true,
          language: true,
          movie: true,
          series: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LibraryCContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLibraryCContent(
    @common.Param() params: LibraryCContentWhereUniqueInput
  ): Promise<LibraryCContent | null> {
    try {
      return await this.service.deleteLibraryCContent({
        where: params,
        select: {
          createdAt: true,
          genre: true,
          id: true,
          language: true,
          movie: true,
          series: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
