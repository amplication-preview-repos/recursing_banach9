/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LibraryCContent as PrismaLibraryCContent,
} from "@prisma/client";

export class LibraryCContentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LibraryCContentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.libraryCContent.count(args);
  }

  async libraryCContents(
    args: Prisma.LibraryCContentFindManyArgs
  ): Promise<PrismaLibraryCContent[]> {
    return this.prisma.libraryCContent.findMany(args);
  }
  async libraryCContent(
    args: Prisma.LibraryCContentFindUniqueArgs
  ): Promise<PrismaLibraryCContent | null> {
    return this.prisma.libraryCContent.findUnique(args);
  }
  async createLibraryCContent(
    args: Prisma.LibraryCContentCreateArgs
  ): Promise<PrismaLibraryCContent> {
    return this.prisma.libraryCContent.create(args);
  }
  async updateLibraryCContent(
    args: Prisma.LibraryCContentUpdateArgs
  ): Promise<PrismaLibraryCContent> {
    return this.prisma.libraryCContent.update(args);
  }
  async deleteLibraryCContent(
    args: Prisma.LibraryCContentDeleteArgs
  ): Promise<PrismaLibraryCContent> {
    return this.prisma.libraryCContent.delete(args);
  }
}
