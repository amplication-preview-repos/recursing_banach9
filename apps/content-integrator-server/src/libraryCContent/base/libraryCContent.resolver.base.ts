/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LibraryCContent } from "./LibraryCContent";
import { LibraryCContentCountArgs } from "./LibraryCContentCountArgs";
import { LibraryCContentFindManyArgs } from "./LibraryCContentFindManyArgs";
import { LibraryCContentFindUniqueArgs } from "./LibraryCContentFindUniqueArgs";
import { CreateLibraryCContentArgs } from "./CreateLibraryCContentArgs";
import { UpdateLibraryCContentArgs } from "./UpdateLibraryCContentArgs";
import { DeleteLibraryCContentArgs } from "./DeleteLibraryCContentArgs";
import { LibraryCContentService } from "../libraryCContent.service";
@graphql.Resolver(() => LibraryCContent)
export class LibraryCContentResolverBase {
  constructor(protected readonly service: LibraryCContentService) {}

  async _libraryCContentsMeta(
    @graphql.Args() args: LibraryCContentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LibraryCContent])
  async libraryCContents(
    @graphql.Args() args: LibraryCContentFindManyArgs
  ): Promise<LibraryCContent[]> {
    return this.service.libraryCContents(args);
  }

  @graphql.Query(() => LibraryCContent, { nullable: true })
  async libraryCContent(
    @graphql.Args() args: LibraryCContentFindUniqueArgs
  ): Promise<LibraryCContent | null> {
    const result = await this.service.libraryCContent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LibraryCContent)
  async createLibraryCContent(
    @graphql.Args() args: CreateLibraryCContentArgs
  ): Promise<LibraryCContent> {
    return await this.service.createLibraryCContent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LibraryCContent)
  async updateLibraryCContent(
    @graphql.Args() args: UpdateLibraryCContentArgs
  ): Promise<LibraryCContent | null> {
    try {
      return await this.service.updateLibraryCContent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LibraryCContent)
  async deleteLibraryCContent(
    @graphql.Args() args: DeleteLibraryCContentArgs
  ): Promise<LibraryCContent | null> {
    try {
      return await this.service.deleteLibraryCContent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
